<!DOCTYPE html>
<html lang="ar">
<head>
  <meta charset="UTF-8">
  <title>أداة دمج أوراق Excel بسهولة وسرعة</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#2c3e50">
  <link rel="manifest" href="manifest.json">
  <link rel="icon" href="favicon.ico" type="image/x-icon">
  <script src="https://cdn.sheetjs.com/xlsx-0.20.0/package/dist/xlsx.full.min.js"></script>
  <style>
    html, body {
      height: 100%;
      margin: 0;
      font-family: 'Segoe UI', Tahoma, sans-serif;
      background: radial-gradient(circle at top left, #e0f7fa, #b2ebf2);
      direction: rtl;
      text-align: center;
      color: #2c3e50;
      user-select: none;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 5vh 5vw;
    }
    h2 {
      font-size: 6vw;
      margin-bottom: 2vh;
    }
    input[type="file"], input[type="number"], button, select {
      margin: 1vh;
      padding: 2vh 2vw;
      font-size: 4vw;
      border: 1px solid #ccc;
      border-radius: 8px;
      width: 90vw;
      max-width: 400px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    button {
      background-color: #009688;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background-color: #00796b;
    }
    label {
      display: block;
      margin-top: 2vh;
      font-weight: bold;
      font-size: 4vw;
    }
    #status {
      margin-top: 2vh;
      font-size: 4vw;
      color: #00796b;
    }
    .note {
      font-size: 3.5vw;
      color: #7f8c8d;
      margin-top: 2vh;
    }
    #splash {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: radial-gradient(circle at top left, #e0f7fa, #b2ebf2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 6vw;
      color: #2c3e50;
      z-index: 9999;
    }
  </style>
</head>
<body oncontextmenu="return false">
  <div id="splash">🧩 جاري تحميل الأداة...</div>

  <h2>أداة دمج أوراق Excel بسهولة وسرعة</h2>
  <input type="file" id="fileInput" multiple accept=".xlsx,.csv"><br>
  <label for="sheetIndex">🔢 رقم الورقة المطلوب دمجها (اختياري):</label>
  <input type="number" id="sheetIndex" min="1" placeholder="مثلاً: 1"><br>
  <div id="sheetSelectors"></div>
  <button onclick="mergeFiles()">✅ دمج وتحميل الملف</button>
  <button onclick="resetForm()">🔄 إعادة تعيين</button>
  <p id="status"></p>
  <p class="note">⚠️ إذا ظهرت رسالة تحذير من Windows، يرجى التأكد أن الملف تم إنشاؤه محليًا وهو آمن تمامًا.</p>

  <script>
    window.addEventListener('load', () => {
      setTimeout(() => {
        document.getElementById('splash').style.display = 'none';
      }, 1500);
      window.addEventListener('keydown', blockKeys);
    });

    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js')
        .then(() => console.log('✅ Service Worker مسجل بنجاح'))
        .catch(err => console.error('❌ فشل تسجيل Service Worker', err));
    }

    function blockKeys(e) {
      const forbidden = [
        { key: 'u', ctrl: true },
        { key: 'c', ctrl: true },
        { key: 's', ctrl: true },
        { key: 'a', ctrl: true },
        { key: 'x', ctrl: true }
      ];
      const isBlocked = forbidden.some(f =>
        e.key.toLowerCase() === f.key && (f.ctrl ? e.ctrlKey : true)
      );
      if (isBlocked) {
        e.preventDefault();
        return false;
      }
      return true;
    }

    function resetForm() {
      document.getElementById('fileInput').value = '';
      document.getElementById('sheetIndex').value = '';
      document.getElementById('sheetSelectors').innerHTML = '';
      document.getElementById('status').textContent = '';
    }

    function mergeFiles() {
      const files = document.getElementById('fileInput').files;
      const sheetIndex = parseInt(document.getElementById('sheetIndex').value) - 1;
      const status = document.getElementById('status');
      const selectors = document.querySelectorAll('.sheet-select');

      if (files.length === 0) {
        status.textContent = 'يرجى اختيار ملفات Excel أولاً.';
        return;
      }

      let mergedData = [];
      let fileCount = 0;

      Array.from(files).forEach((file, i) => {
        const reader = new FileReader();
        reader.onload = function (e) {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });

          let sheetName;
          if (selectors.length > 0) {
            sheetName = selectors[i].value;
          } else if (!isNaN(sheetIndex) && workbook.SheetNames[sheetIndex]) {
            sheetName = workbook.SheetNames[sheetIndex];
          } else {
            sheetName = workbook.SheetNames[0];
          }

          const sheet = workbook.Sheets[sheetName];
          const json = XLSX.utils.sheet_to_json(sheet, { defval: '' });
          mergedData = mergedData.concat(json);
          fileCount++;

          if (fileCount === files.length) {
            const newSheet = XLSX.utils.json_to_sheet(mergedData);
            const newWorkbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(newWorkbook, newSheet, 'Merged');
            XLSX.writeFile(newWorkbook, 'merged.xlsx');
            status.textContent = '✅ تم دمج الملفات بنجاح!';
          }
        };
        reader.readAsArrayBuffer(file);
      });
    }

    document.getElementById('fileInput').addEventListener('change', function () {
      const container = document.getElementById('sheetSelectors');
      container.innerHTML = '';
      Array.from(this.files).forEach((file, i) => {
        const label = document.createElement('label');
        label.textContent = `📄 اختر الورقة من ${file.name}`;
        const select = document.createElement('select');
        select.className = 'sheet-select';
        select.disabled = true;
        container.appendChild(label);
        container.appendChild(select);

        const reader = new FileReader();
        reader.onload = function (e) {
          const data = new Uint8Array(e.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          select.disabled = false;
          workbook.SheetNames.forEach(name => {
            const option = document.createElement('option');
            option.value = name;
            option.textContent = name;
            select.appendChild(option);
          });
        };
        reader.readAsArrayBuffer(file);
      });
    });
  </script>
</body>
</html>
